// MongoDB Playground
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// BD name
const database = 'ImproTicDB';

// The current database to use.
use(database);

// users collection
let collection = 'users';

// Drop users collection
db.getCollection(collection).drop();

/* Correo, identificación, nombre completo y contraseña, 
 * tipo de usuario (Estudiante, líder o administrador),
 * estado (Pendiente/Autorizado/No Autorizado) que será por defecto pendiente.
 */

// Create a users collection
db.createCollection(collection, {
  validator: {
    $jsonSchema: {
      required: ['email', 'documentId', 'name', 'lastName', 'fullName', 'role', 'status'],
      properties: {
        email: {
          bsonType: 'string',
          pattern: '^[a-z0-9+_.-]+@[a-z0-9.-]+$'
        },
        documentId: {
          bsonType: 'long',
        },
        name: {
          bsonType: 'string'
        },
        lastName: {
          bsonType: 'string'
        },
        fullName: {
          bsonType: 'string'
        },
        role: {
          enum: ["admin", "leader", "student"]
        },
        status: {
          enum: ["pending", "authorized", "unauthorized"]
        },
        password: {
          bsonType: 'string'
        }
      }
    }
  }
});

// Create unique index for email and documentId
db.getCollection(collection).createIndex({ email: 1 }, { unique: true });
db.getCollection(collection).createIndex({ documentId: 1 }, { unique: true });

const users = [
  {
    "email": "manuelfsilvcr7@gmail.com",
    "documentId": Long('1020312418'),
    "name": "Manuel",
    "lastName": "Silva",
    "fullName": "Manuel Silva",
    "role": "admin",
    "status": "pending",
    "password": "manuel_silva_418"
  },
  {
    "email": "diegofelipem99@gmail.com",
    "documentId": Long('1020142312'),
    "name": "Diego",
    "lastName": "Muñoz",
    "fullName": "Diego Muñoz",
    "role": "student",
    "status": "pending",
    "password": "diego_muñoz_418"
  },
  {
    "email": "diazalejandro123456@gmail.com",
    "documentId": Long('1020345678'),
    "name": "Diego",
    "lastName": "Diaz",
    "fullName": "Diego Diaz",
    "role": "leader",
    "status": "pending",
    "password": "diego_diaz_678"
  },
  {
    "email": "cfbravo@unimayor.edu.co",
    "documentId": Long('1234567890'),
    "name": "Cristian",
    "lastName": "Bravo",
    "fullName": "Cristian Bravo",
    "role": "leader",
    "status": "pending",
    "password": "cristian_bravo_890"
  }
];

// Insert users
db.getCollection(collection).insertMany(users);

// projects collection

collection = 'projects';

// Drop projects collections
db.getCollection(collection).drop();

/* Identificador único del proyecto (Inmutable), 
 * nombre del proyecto, objetivos generales, objetivos específicos, presupuesto, fecha de inicio,
 * terminación del proyecto, el documento de identificación y nombre del líder, 
 * el estado del proyecto (activo/inactivo) que será por defecto inactivo, 
 * fase del proyecto (iniciado, en desarrollo, terminado) que será nula por defecto.
 */

// Create projects collection
db.createCollection(collection, {
  validator: {
    $jsonSchema: {
      required: ['name', 'generalObjective', 'specificObjectives', 'budget', 'startDate', 'endDate', 'leader_id', 'status'],
      properties: {
        name: {
          bsonType: 'string',
        },
        generalObjective: {
          bsonType: 'string'
        },
        specificObjectives: {
          bsonType: 'array'
        },
        budget: {
          bsonType: 'decimal'
        },
        startDate: {
          bsonType: 'date'
        },
        endDate: {
          bsonType: 'date'
        },
        leader_id: {
          bsonType: 'objectId'
        },
        status: {
          enum: ['active', 'inactive']
        },
        phase: {
          enum: ['started', 'in progress', 'ended']
        }
      }
    }
  }
});

const projects = [
  {
    "name": "Seguridad en redes sociales",
    "generalObjective": "Fomentar la correcta utilización de las diferentes redes sociales.",
    "specificObjectives": ["Concientizar de la información expuesta en las redes sociales.", "Analizar la red de contactos en su red social."],
    "budget": Decimal128('20000000'),
    "startDate": new Date(),
    "endDate": new Date(new Date().getTime() + 60*24*60*60000),
    "leader_id": db.users.findOne({email: 'diazalejandro123456@gmail.com'})._id,
    "status": "inactive",
  },
  {
    "name": "Robot auxiliar de parqueadero",
    "generalObjective": "Automatizar la reservación y ocupación de parqueaderos.",
    "specificObjectives": ["Agendar en menor tiempo posible.", "Encontrar rapidamente la mejor ubicación dentro del parqueadero."],
    "budget": Decimal128('10000000'),
    "startDate": new Date(),
    "endDate": new Date(new Date().getTime() + 60*24*60*60000),
    "leader_id": db.users.findOne({email: 'cfbravo@unimayor.edu.co'})._id,
    "status": "inactive",
  }
];

// Insert projects
db.getCollection(collection).insertMany(projects);

// enrollments collection
collection = 'enrollments';

// Drop enrollments collection
db.getCollection(collection).drop();

/* Identificador único (inmutable), los identificadores del proyecto y estudiante (para relaciónarlos), 
 * el estado de la inscripción (aceptada/rechazada), 
 * fecha de ingreso, automáticamente cuando el líder actualice el estado de la inscripción a aceptada; 
 * fecha de egreso, automáticamente cuando la fase del proyecto se actualice a terminada o el estado del proyecto sea actualizado a inactivo.
 */

// Create enrollments collection
db.createCollection(collection, {
  validator: {
    $jsonSchema: {
      required: ['project_id', 'user_id'],
      properties: {
        project_id: {
          bsonType: 'objectId',
        },
        user_id: {
          bsonType: 'objectId'
        },
        status: {
          enum: ['acepted', 'rejected']
        },
        enrollmentDate: {
          bsonType: 'date'
        },
        egressDate: {
          bsonType: 'date'
        }
      }
    }
  }
});

// Create unique index for project_id and user_id
db.getCollection(collection).createIndex({ project_id: 1, user_id: 1 }, { unique: true, name: '_project_user_' });

const enrollments = [
  {
    "project_id": db.projects.findOne({name: 'Seguridad en redes sociales'}, {_id: 1})._id,
    "user_id": db.users.findOne({email: 'diazalejandro123456@gmail.com'}, {_id: 1})._id
  },
  {
    "project_id": db.projects.findOne({name: 'Robot auxiliar de parqueadero'}, {_id: 1})._id,
    "user_id": db.users.findOne({email: 'cfbravo@unimayor.edu.co'})._id
  }
];

// Insert enrollments
db.getCollection(collection).insertMany(enrollments);

// advances collection
collection = 'advances'

// Drop advances collection
db.getCollection(collection).drop();

/* Identificador único del avance (inmutable), el identificador del proyecto (para relaciónarlo), 
 * fecha del avance, descripción del avance, las observaciónes del líder.
 */

// Create advances collection
db.createCollection(collection, {
  validator: {
    $jsonSchema: {
      required: ['project_id', 'addDate', 'description', 'observations'],
      properties: {
        project_id: {
          bsonType: 'objectId',
        },
        addDate: {
          bsonType: 'date'
        },
        description: {
          bsonType: 'string'
        },
        observations: {
          bsonType: 'string'
        }
      }
    }
  }
});

const advances = [
  {
    "project_id": db.projects.findOne({name: 'Seguridad en redes sociales'}, {_id: 1})._id,
    "addDate": new Date(),
    "description": 'Conferencia en universidades sobre seguridad en redes sociales.',
    "observations": 'Gran impacto de los asistentes después de asistir a la conferencia.',
  },
  {
    "project_id": db.projects.findOne({name: 'Robot auxiliar de parqueadero'}, {_id: 1})._id,
    "addDate": new Date(),
    "description": 'Utilización de lector de qr en la entrada del parqueadero.',
    "observations": 'Eficiencia y disminución en tiempos de espera con la utilización del qr.',
  }
];

// Insert advances
db.getCollection(collection).insertMany(advances);